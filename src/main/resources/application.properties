spring.application.name=employee-service
server.servlet.context-path=/rest
#
spring.jpa.show-sql=false
# --- works through "println" on console.
# https://www.baeldung.com/sql-logging-spring-boot
# To work through "logger" need to set "logging.level" property
# or tune logback.xml
spring.jpa.open-in-view=false
spring.jpa.hibernate.ddl-auto=create-drop
#
# BE CAREFUL !!!   https://www.baeldung.com/jpa-hibernate-batch-insert-update
spring.jpa.properties.hibernate.jdbc.batch_size=10
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true
#
# https://www.baeldung.com/sql-logging-spring-boot
# For fine tuning see: logback.xml
#
#logging.level.org.hibernate.SQL=DEBUG
#logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
#
#logging.level.org.springframework.jdbc.core.JdbcTemplate=DEBUG
#logging.level.org.springframework.jdbc.core.StatementCreatorUtils=TRACE

spring.h2.console.enabled=true
spring.h2.console.path=/h2-console
spring.jackson.serialization.write-dates-as-timestamps=false

management.endpoints.enabled-by-default=false
management.endpoint.info.enabled=true
management.endpoint.health.enabled=true
management.endpoint.health.show-details=always
management.endpoint.metrics.enabled=true
management.endpoints.web.exposure.include=health,info,metrics

management.metrics.web.server.auto-time-requests=false


logging.file=employee_app.log
