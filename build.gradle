import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    id 'org.springframework.boot' version '2.1.5.RELEASE'
    id 'java'
    id 'idea'
}

apply plugin: 'io.spring.dependency-management'

group = 'com.samsolution'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

//configurations {
//    compileOnly {
//        extendsFrom annotationProcessor
//    }
//}

repositories {
    jcenter()
    mavenCentral()
}

configurations.all {
    // Убирает зависимость Spring от commons-logging
    exclude group: 'commons-logging', module: 'commons-logging'
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-amqp'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    implementation 'org.apache.cxf:cxf-spring-boot-starter-jaxrs:3.3.2'
    implementation 'com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider'
    // implementation 'org.apache.cxf:cxf-rt-rs-service-description-swagger:3.3.2'


    implementation 'io.springfox:springfox-swagger2:2.9.2'
    implementation 'io.springfox:springfox-swagger-ui:2.9.2'

    // implementation 'org.webjars:swagger:3.+'
    // implementation 'org.webjars:swagger-ui:3.+'
    // implementation 'io.springfox:springfox-swagger-ui:2.9.2'

    runtimeOnly 'com.h2database:h2'

    compileOnly 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // https://mvnrepository.com/artifact/io.arivera.oss/embedded-rabbitmq
    // testImplementation 'io.arivera.oss:embedded-rabbitmq:1.3.0'

    test {
        // https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/testing/Test.html

        // set a system property for the test JVM(s)
        // systemProperty 'someProp', 'someValue'

        // Fail the 'test' task on the first test failure
        failFast = false

        // explicitly include or exclude tests
        // include 'org/foo/**'
        // exclude 'org/boo/**'

        // listen to events in the test execution lifecycle
        // beforeTest { TestDescriptor desc ->
        //     logger.lifecycle('\n\n\n===================Running test: {}', desc.name)
        // }


        testLogging {
            showStandardStreams = false // show standard out and standard error of the test JVM(s) on the console
            events(TestLogEvent.PASSED, TestLogEvent.SKIPPED, TestLogEvent.FAILED)
        }

        afterSuite { TestDescriptor desc, TestResult result ->
            if (!desc.parent) { // will match the outermost suite
                logger.lifecycle('\n\n\n===================Test summary: {}\n' +
                        '{} Tests total:\n' +
                        '{} Successes, \n' +
                        '{} Failures, \n' +
                        '{} Skipped',
                        result.resultType, result.testCount, result.successfulTestCount, result.failedTestCount, result.skippedTestCount)
            }
        }
    }
}
